{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    "incremental": true /*  TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度 */,
    // "composite": true,                                /*说明该文件夹为一个子项目 */
    "tsBuildInfoFile": "./.tsbuildinfo" /* 增量编译文件的存储位置 */,
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT' */,
    // "lib": [] /*指定要包含在编译中的库文件 */,
    "jsx": "preserve" /* 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react' */,
    "experimentalDecorators": true /* 启用装饰器 */,
    "emitDecoratorMetadata": true /* 为装饰器提供元数据的支持 */,
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs" /*  指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015' */,
    "rootDir": "./" /*用来控制输出目录结构 --outDir. */,
    "moduleResolution": "node" /* 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6) */,
    "baseUrl": "./" /*  用于解析非相对模块名称的基目录 */,
    "paths": {} /* 模块名到基于 baseUrl 的路径映射的列表 */,
    // "rootDirs": [] /*  根文件夹列表，其组合内容表示项目运行时的结构内容 */,
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    "allowJs": true /* 允许编译 javascript 文件 */,
    "checkJs": true /* 报告 javascript 文件中的错误 */,
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "declaration": true /* 生成相应的 '.d.ts' 文件 */,
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /*只生成声明文件，而不会生成js文件 */
    "sourceMap": true /* 生成相应的 '.map' 文件 */,
    // "outFile": "./" /* 将输出文件合并为一个文件 */,
    "outDir": "./dist" /* 指定输出目录 */,
    "removeComments": true /*  删除编译后的所有的注释 */,
    "noEmit": true /*不生成输出文件 */,
    // "importHelpers": true,                            /* 从 tslib 导入辅助工具函数 */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    "downlevelIteration": true /* 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现 */,
    // "sourceRoot": "",                                 /* 指定调试器应该找到 TypeScript 文件而不是源文件的位置 */
    // "mapRoot": "",                                    /* 指定调试器应该找到映射文件而不是生成文件的位置 */
    // "inlineSourceMap": true,                          /* 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件 */
    // "inlineSources": true,                            /* / 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性 */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints 互操作约束 */
    // "isolatedModules": true /* 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）. */,
    "allowSyntheticDefaultImports": true /* 允许从没有设置默认导出的模块中默认导入。 */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking -- 严格的类型检查选项 */
    "strict": true /* 启用所有严格类型检查选项 */,
    "noImplicitAny": true /* 在表达式和声明上有隐含的 any类型时报错 */,
    "strictNullChecks": true /* 启用严格的 null 检查 */,
    "strictFunctionTypes": true /*此规则会更彻底地检查函数参数 -- 不允许函数参数双向协变*/,
    "strictBindCallApply": true /* 此规则可以确保使用具有正确参数的 call()、bind() 和 apply() 函数 */,
    "strictPropertyInitialization": true /*此规则将强制在构造函数中初始化所有属性值 */,
    "noImplicitThis": true /* 当 this 表达式值为 any 类型的时候，生成一个错误 */,
    "useUnknownInCatchVariables": true /* 开启这个选项typescript会将catch语法块中的err变量当做unknown来处理, 不开启此选项时, err变量是被当做any类型来处理的, 这很容易造成经典的read property of undefined运行时异常 */,
    "alwaysStrict": true /*以严格模式检查每个模块，并在每个文件里加入 'use strict' */,
    "noUnusedLocals": true /*  有未使用的变量时，抛出错误 */,
    "noUnusedParameters": true /* 有未使用的参数时，抛出错误 */,
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true /* 并不是所有函数里的代码都有返回值时，抛出错误 */,
    "noFallthroughCasesInSwitch": true /*  报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿） */,
    "noUncheckedIndexedAccess": true /* 开启这个选项, typescript自动给索引签名语法声明的属性补上一个undefined类型 */,
    "noImplicitOverride": true /* 开启此选项保证子类重写基类的方法是，必须在方法前加上override关键词。 */,
    "noPropertyAccessFromIndexSignature": true /*开启后禁止通过访问常规属性的方法来访问index signature声明的属性 */,
    "allowUnusedLabels": true /*  表示是否允许未使用到的标签
      undefined：默认值，碰未使用的标签给出warning警告；
      false：碰到未使用过的标签抛出错误，编译失败；
      true：碰到未使用过的标签编译通过，且不给出异常。
    */,
    "allowUnreachableCode": true /* 表示是否允许代码中出现永远无法被执行到的代码 */,

    /* Completeness */
    "skipDefaultLibCheck": true /* 跳过TypeScript中包含的.d.ts文件的类型检查。 */,
    "skipLibCheck": true /* 跳过对所有.d.ts文件的类型检查。 */
  }
}
